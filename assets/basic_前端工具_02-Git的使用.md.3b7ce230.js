import{_ as s,c as e,I as o,V as t,o as n,J as l}from"./chunks/framework.987d87f6.js";const g=JSON.parse('{"title":"02-Git的使用","description":"","frontmatter":{"title":"02-Git的使用"},"headers":[],"relativePath":"basic/前端工具/02-Git的使用.md","filePath":"basic/前端工具/02-Git的使用.md"}'),p={name:"basic/前端工具/02-Git的使用.md"},c=t(`<h2 id="常见操作" tabindex="-1">常见操作 <a class="header-anchor" href="#常见操作" aria-label="Permalink to &quot;常见操作&quot;">​</a></h2><h3 id="全局配置用户信息" tabindex="-1">全局配置用户信息 <a class="header-anchor" href="#全局配置用户信息" aria-label="Permalink to &quot;全局配置用户信息&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git config --global user.name &quot;smyhvae&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">git config --global user.email &quot;smyhvae@163.com&quot;</span></span></code></pre></div><h2 id="分支的合并" tabindex="-1">分支的合并 <a class="header-anchor" href="#分支的合并" aria-label="Permalink to &quot;分支的合并&quot;">​</a></h2><h3 id="场景-基于-master-分支的代码-开发一个新的特性" tabindex="-1">场景：基于 master 分支的代码，开发一个新的特性 <a class="header-anchor" href="#场景-基于-master-分支的代码-开发一个新的特性" aria-label="Permalink to &quot;场景：基于 master 分支的代码，开发一个新的特性&quot;">​</a></h3><p>如果你直接在 master 分支上开发这个新特性，是不好的，万一你在开发<code>特性1</code>的时候，领导突然又要叫你去开发<code>特性2</code>，就不好处理了。难道开发的两个特性都提交到 master？一会儿提交特性 1 的 commit，一会儿提交特性 2 的 commit？这会导致 commit 记录很混乱。</p><p>所以，我给你的建议做法是：给每个特性都单独建一个的新的分支。</p><p>比如说，我专门给<code>特性1</code>建一个分支<code>feature_item_recommend</code>。具体做法如下：</p><p>（1）基于 master 分支，创建一个新的分支，起名为<code>feature_item_recommend</code>：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">$ git checkout -b feature_item_recommend</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">Switched to a new branch &#39;feature_item_recommend&#39;</span></span></code></pre></div><p>上面这行命令，相当于：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">branch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">feature_item_recommend</span><span style="color:#A6ACCD;">    </span><span style="color:#C3E88D;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">创建新的分支</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">checkout</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">feature_item_recommend</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">//切换到新的分支</span></span></code></pre></div><p>（2）在新的分支<code>feature_item_recommend</code>上，完成开发工作，并 commit 、push。</p><p>（3）将分支<code>feature_item_recommend</code>上的开发进度<strong>合并</strong>到 master 分支：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">checkout</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">master</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">//切换到master分支</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">merge</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">feature_item_recommend</span><span style="color:#A6ACCD;">    </span><span style="color:#C3E88D;">//将分支</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">feature_item_recommend</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">的开发进度合并到</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">master</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">分支</span></span></code></pre></div><p>合并之后，<code>master</code>分支和<code>feature_item_recommend</code>分支会指向同一个位置。</p><p>（3）删除分支<code>feature_item_recommend</code>：</p><blockquote><p>既然 特性 1 开发完了，也放心地提交到 master 了，那我们就可以将这个分支删除了。</p></blockquote><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git branch -d feature_item_recommend</span></span></code></pre></div><p>注意，我们当前是处于<code>master</code>分支的位置，来删除<code>feature_item_recommend</code>分支。如果当前是处于<code>feature_item_recommend</code>分支，是没办法删除它自己的。</p><p>同理，当我转身去开发<code>特性2</code>的时候，也是采用同样的步骤。</p><h3 id="合并分支时-如果存在分叉" tabindex="-1">合并分支时，如果存在分叉 <a class="header-anchor" href="#合并分支时-如果存在分叉" aria-label="Permalink to &quot;合并分支时，如果存在分叉&quot;">​</a></h3><p><img src="http://img.smyhvae.com/20180610_1650.png" alt=""></p><p>比如说上面这张图中，最早的时候，master 分支是位于<code>C2</code>节点。我基于<code>C2</code>节点，new 出一个新的分支<code>iss53</code>，我在<code>iss53</code>上提交了好几个 commit。</p><p>现在，我准备把<code>iss53</code>上的几个 commit 合并到 master 上，此时发现，master 分支已经前进到 C4 了。那该怎么合并呢？</p><p>合并的命令仍然是：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">checkout</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">master</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">merge</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">iss53</span></span></code></pre></div><p><strong>解释</strong>：</p><p>这次合并的实现，并不同于简单的并入方式。这一次，我的开发历史是从更早的地方开始分叉的。</p><p>由于当前 master 分支所指向的 commit (C4)并非想要并入分支（iss53）的直接祖先，Git 不得不进行一些处理。就此例而言，Git 会用两个分支的末端（C4 和 C5）和它们的共同祖先（C2）进行一次简单的三方合并计算。</p><p>Git 没有简单地把分支指针右移，而是对三方合并的结果作一新的快照，并自动创建一个指向它的 commit（C6）（如下图所示）。我们把这个特殊的 commit 称作合并提交（mergecommit），因为它的祖先不止一个。</p><p>值得一提的是 Git 可以自己裁决哪个共同祖先才是最佳合并基础；这和 CVS 或 Subversion（1.5 以后的版本）不同，它们需要开发者手工指定合并基础。所以此特性让 Git 的合并操作比其他系统都要简单不少。</p><p><img src="http://img.smyhvae.com/20180610_1710.png" alt=""></p><h3 id="解决合并时发生的冲突" tabindex="-1">解决合并时发生的冲突 <a class="header-anchor" href="#解决合并时发生的冲突" aria-label="Permalink to &quot;解决合并时发生的冲突&quot;">​</a></h3><p><img src="http://img.smyhvae.com/20180610_1740.png" alt=""></p><p>如果 feature1 和 feature2 修改的是同一个文件中<strong>代码的同一个位置</strong>，那么，把 feature1 合并到 feature2 时，就会产生冲突。这个冲突需要人工解决。步骤如下：</p><p>（1）手动修改文件：手动修改冲突的那个文件，决定到底要用哪个分支的代码。</p><p>（2）git add：解决好冲突后，输入<code>git status</code>，会提示<code>Unmerged paths</code>。这个时候，输入<code>git add</code>即可，表示：<strong>修改冲突成功，加入暂存区</strong>。</p><p>（3）git commit 提交。</p><p>然后，我们可以继续把 feature1 分支合并到 master 分支，最后删除 feature1、feature2。</p><p><strong>注意</strong>：两个分支的同一个文件的不同地方合并时，git 会自动合并，不会产生冲突。</p><p>比如分支 feture1 对 index.html 原来的第二行之前加入了一段代码。 分支 feature2 对 index.html 在原来的最后一行的后面加入了一段代码。 这个时候在对两个分支合并，git 不会产生冲突，因为两个分支是修改同一文件的不同位置。 git 自动合并成功。不管是 git 自动合并成功，还是在人工解决冲突下合并成功，提交之前，都要对代码进行测试。</p><h2 id="日常操作积累" tabindex="-1">日常操作积累 <a class="header-anchor" href="#日常操作积累" aria-label="Permalink to &quot;日常操作积累&quot;">​</a></h2><h3 id="修改密码-曲线救国" tabindex="-1">修改密码（曲线救国） <a class="header-anchor" href="#修改密码-曲线救国" aria-label="Permalink to &quot;修改密码（曲线救国）&quot;">​</a></h3><blockquote><p>网上查了很久，没找到答案。最终，在 cld 童鞋的提示下，采取如下方式进行曲线救国。</p></blockquote><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 设置当前仓库的用户名为空</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">user.name</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span></span></code></pre></div><p>然后，当我们再输入<code>git pull</code>等命令行时，就会被要求重新输入<em>新的</em>账号密码。此时，密码就可以修改成功了。最后，我们还要输入如下命令，还原当前仓库的用户名：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git config user.name &quot;smyhvae&quot;</span></span></code></pre></div><h3 id="修改已经-push-的某次-commit-的作者信息" tabindex="-1">修改已经 push 的某次 commit 的作者信息 <a class="header-anchor" href="#修改已经-push-的某次-commit-的作者信息" aria-label="Permalink to &quot;修改已经 push 的某次 commit 的作者信息&quot;">​</a></h3><p>已经 push 的记录，如果要修改作者信息的话，只能 通过--force 命令。我反正是查了很久，但最终还是不敢用公司的仓库尝试。</p><p>参考链接：</p><ul><li><a href="https://segmentfault.com/q/1010000006999861" target="_blank" rel="noreferrer">git 修改已提交的某一次的邮箱和用户信息</a></li></ul><p>看最后一条答案。</p><ul><li><a href="http://baurine.github.io/2015/08/22/git_update_author.html" target="_blank" rel="noreferrer">修改 git repo 历史提交的 author</a></li></ul><h3 id="将-branch1的某个commit1合并到branch2当中" tabindex="-1">将 <code>branch1</code>的某个<code>commit1</code>合并到<code>branch2</code>当中 <a class="header-anchor" href="#将-branch1的某个commit1合并到branch2当中" aria-label="Permalink to &quot;将 \`branch1\`的某个\`commit1\`合并到\`branch2\`当中&quot;">​</a></h3><p>切换到 branch2 中，然后执行如下命令：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git cherry-pick commit1</span></span></code></pre></div><h3 id="_20190118-修改-github-已提交的用户名和邮箱" tabindex="-1">20190118-修改 GitHub 已提交的用户名和邮箱 <a class="header-anchor" href="#_20190118-修改-github-已提交的用户名和邮箱" aria-label="Permalink to &quot;20190118-修改 GitHub 已提交的用户名和邮箱&quot;">​</a></h3><p>参考链接：（亲测有效）</p><ul><li><p><a href="https://cloud.tencent.com/developer/article/1352623" target="_blank" rel="noreferrer">修改 Git 全部 Commit 提交记录的用户名 Name 和邮箱 Email</a></p></li><li><p><a href="https://blog.csdn.net/yusufolu9/article/details/53706269" target="_blank" rel="noreferrer">Mac 运行 sh 文件，也就是传说中的 shell 脚本</a></p></li></ul><p>在执行<code>./email.sh</code>后，如果出现<code>permission denied</code>的错误，可以先执行<code>chmod 777 email.sh</code>，修改文件的权限。</p><h3 id="_20200520-将-git-项目迁移到另一个仓库" tabindex="-1">20200520-将 Git 项目迁移到另一个仓库 <a class="header-anchor" href="#_20200520-将-git-项目迁移到另一个仓库" aria-label="Permalink to &quot;20200520-将 Git 项目迁移到另一个仓库&quot;">​</a></h3><p>我们假设旧仓库的项目名称叫<code>old-repository</code>，新仓库的项目名称叫<code>new-repository</code>。操作如下：</p><p>（1）创建旧仓库的裸克隆：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clone</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--bare</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://github.com/exampleuser/old-repository.git</span></span></code></pre></div><p>执行上述命令后，会在本地生成一个名叫 <code>old-repository.git</code>的文件夹。</p><p>（2）迁移到新仓库：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">old-repository.git</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">push</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--mirror</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://github.com/exampleuser/new-repository.git</span></span></code></pre></div><p>这样的话，项目就已经迁移到新仓库了。</p><p>注意，我们<strong>不需要</strong>手动新建一个空的新仓库，当我们执行上述命令之后，新仓库就已经自动创建好了。</p><p>参考链接：</p><ul><li><p><a href="https://help.github.com/cn/github/creating-cloning-and-archiving-repositories/duplicating-a-repository" target="_blank" rel="noreferrer">复制仓库</a></p></li><li><p><a href="https://moelove.info/2016/12/04/Git-%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E5%92%8C%E8%A3%B8%E4%BB%93%E5%BA%93/" target="_blank" rel="noreferrer">Git 本地仓库和裸仓库</a></p></li></ul><h3 id="_2021-11-10-提交代码时-绕过-eslint-检查" tabindex="-1">2021-11-10-提交代码时，绕过 eslint 检查 <a class="header-anchor" href="#_2021-11-10-提交代码时-绕过-eslint-检查" aria-label="Permalink to &quot;2021-11-10-提交代码时，绕过 eslint 检查&quot;">​</a></h3><p>需求：提交代码时，绕过 eslint 检查</p><p>解决办法：用命令行提交，在命令做 git commit 的时候，末尾追加<code>--no-verify</code>。例如：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">commit</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-m</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">千古壹号的commit备注</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--no-verify</span></span></code></pre></div>`,76);function r(i,d,m,C,h,u){const a=l("ArticleTopAd");return n(),e("div",null,[o(a),c])}const A=s(p,[["render",r]]);export{g as __pageData,A as default};
