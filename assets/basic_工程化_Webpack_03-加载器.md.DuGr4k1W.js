import{_ as a,c as e,o,a4 as r,a8 as t,a9 as l,aa as s,ab as i}from"./chunks/framework.C8gDNRqg.js";const f=JSON.parse('{"title":"加载器 Loader","description":"","frontmatter":{},"headers":[],"relativePath":"basic/工程化/Webpack/03-加载器.md","filePath":"basic/工程化/Webpack/03-加载器.md"}'),c={name:"basic/工程化/Webpack/03-加载器.md"},d=r('<h1 id="加载器-loader" tabindex="-1">加载器 Loader <a class="header-anchor" href="#加载器-loader" aria-label="Permalink to &quot;加载器 Loader&quot;">​</a></h1><blockquote><p>Webpack 默认只打包 js 和 json 文件，loader 可以允许 Webpack 处理其他类型文件。处理不同类型文件要安装不同的包，做不同的配置。</p></blockquote><h2 id="_1-处理css文件" tabindex="-1">1. 处理css文件 <a class="header-anchor" href="#_1-处理css文件" aria-label="Permalink to &quot;1. 处理css文件&quot;">​</a></h2><h3 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h3><p>以npm的安装方法为例：<code>npm i style-loader@3.0.0 css-loader@5.2.6 -D</code></p><h3 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h3><p>在 webpack.config.js -&gt;module.export 里面增加module-&gt;rules数组节点，添加规则如下</p><p><img src="'+t+'" alt=""></p><h2 id="_2-处理less文件" tabindex="-1">2. 处理less文件 <a class="header-anchor" href="#_2-处理less文件" aria-label="Permalink to &quot;2. 处理less文件&quot;">​</a></h2><h3 id="安装-1" tabindex="-1">安装 <a class="header-anchor" href="#安装-1" aria-label="Permalink to &quot;安装&quot;">​</a></h3><p><code>npm i less-loader@10.0.1 less@4.1.1 -D</code></p><h3 id="配置-1" tabindex="-1">配置 <a class="header-anchor" href="#配置-1" aria-label="Permalink to &quot;配置&quot;">​</a></h3><p>在 webpack.config.js 文件-&gt;module.export 里面增加module-&gt;rules 数组节点，添加规则如下</p><p><img src="'+l+'" alt=""></p><h2 id="_3-处理样式表中与url路径相关的文件" tabindex="-1">3. 处理样式表中与url路径相关的文件 <a class="header-anchor" href="#_3-处理样式表中与url路径相关的文件" aria-label="Permalink to &quot;3. 处理样式表中与url路径相关的文件&quot;">​</a></h2><h3 id="安装-2" tabindex="-1">安装 <a class="header-anchor" href="#安装-2" aria-label="Permalink to &quot;安装&quot;">​</a></h3><p><code>npm i url-loader@4.1.1 file-loader@6.2.0 -D</code></p><h3 id="配置-2" tabindex="-1">配置 <a class="header-anchor" href="#配置-2" aria-label="Permalink to &quot;配置&quot;">​</a></h3><p>在 webpack.config.js 文件-&gt;module.export 里面增加module-&gt;rules 数组节点，添加规则如下</p><p><img src="'+s+'" alt=""></p><p>其中 limit 参数表示可转的图片大小上限（单位字节），超过上限就不转为 BASE64，而用 http 协议路径。</p><h2 id="_4-处理webpack无法处理的高级js语法" tabindex="-1">4. 处理webpack无法处理的高级js语法 <a class="header-anchor" href="#_4-处理webpack无法处理的高级js语法" aria-label="Permalink to &quot;4. 处理webpack无法处理的高级js语法&quot;">​</a></h2><h3 id="安装-3" tabindex="-1">安装 <a class="header-anchor" href="#安装-3" aria-label="Permalink to &quot;安装&quot;">​</a></h3><p><code>npm i babel-loader@8.2.2 @babel/core@7.14.6 @babel/plugin-proposal-decorators@7.14.5 -D</code></p><h3 id="配置-3" tabindex="-1">配置 <a class="header-anchor" href="#配置-3" aria-label="Permalink to &quot;配置&quot;">​</a></h3><p>在 webpack.config.js 文件-&gt;module.export 里面增加module-&gt;rules 数组节点，添加规则如下</p><p><img src="'+i+'" alt=""></p><p>其中 exclude 表示排除哪些文件，此处排除第三方包，这些文件不需要程序员关心。</p>',28),h=[d];function p(n,u,b,_,m,k){return o(),e("div",null,h)}const x=a(c,[["render",p]]);export{f as __pageData,x as default};
