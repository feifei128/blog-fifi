import{_ as s,c as e,o as a,V as n}from"./chunks/framework.987d87f6.js";const A=JSON.parse('{"title":"HTTP 模块","description":"","frontmatter":{},"headers":[],"relativePath":"basic/服务端/Nodejs/04-http模块.md","filePath":"basic/服务端/Nodejs/04-http模块.md"}'),l={name:"basic/服务端/Nodejs/04-http模块.md"},t=n(`<h1 id="http-模块" tabindex="-1">HTTP 模块 <a class="header-anchor" href="#http-模块" aria-label="Permalink to &quot;HTTP 模块&quot;">​</a></h1><h2 id="含义" tabindex="-1">含义 <a class="header-anchor" href="#含义" aria-label="Permalink to &quot;含义&quot;">​</a></h2><p>是 Node.js 官方提供的用来创建 web 服务器的模块。通过 <code>http.createServer()</code>方法就可以将一台普通电脑变成 web 服务器，从而对外提供 web 资源服务。所以在 Node.js 中，我们不需要使用 IIS、Apache 等第三方 web 服务器软件，可以用 http 模块手撸一个服务器。</p><h2 id="服务器相关概念" tabindex="-1">服务器相关概念 <a class="header-anchor" href="#服务器相关概念" aria-label="Permalink to &quot;服务器相关概念&quot;">​</a></h2><ul><li>ⅰ. ip 地址：互联网上每台计算机的唯一地址。格式为点分十进制。</li><li>ⅱ. 域名：127.0.0.1 的域名为 <code>localhost</code>。</li><li>ⅲ. 域名服务器：ip 地址和域名是一一对应的，这些信息存储在域名服务器 DNS 中。</li><li>ⅳ. 端口号：类似于门牌号。端口号和 web 服务是一对一的关系，每个端口号不能同时被多个 web 服务占用。在实际应用中，url 中的 <code>80</code> 端口是可以被省略的，其他端口号不可省略。</li></ul><h2 id="创建-web-服务器" tabindex="-1">创建 Web 服务器 <a class="header-anchor" href="#创建-web-服务器" aria-label="Permalink to &quot;创建 Web 服务器&quot;">​</a></h2><ul><li>ⅰ. 导入：<code>const http = require( &#39;http&#39;)</code></li><li>ⅱ. 创建 web 服务实例：<code>const server = http.createServero</code></li><li>ⅲ. 为服务器实例绑定 request 事件：on()方法用来绑定事件，第一参数为具体事件。</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">// 使用服务器实例的 .on() 方法,为服务器绑定一个 request 事件</span></span>
<span class="line"><span style="color:#A6ACCD;">server.on(&#39;request&#39;. (req, res) =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">    // 只要有客户端来请求我们自己的服务器,就会触发request事件，从而调用这个事件处理函数</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(&#39;Someone visit our web server. &#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">})</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// ① req 请求对象：包含了与客户端相关的数据和属性。如 req.url 是客户端请求的 url 地址，req.method 是客户端请求的 method 类型(get 或 post)。</span></span>
<span class="line"><span style="color:#A6ACCD;">// ② res 响应对象：包含了与服务器相关的数据和属性。res.end() 方法响应客户端。</span></span></code></pre></div><ul><li>ⅳ. 启动服务器：</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">// 调用server.listen(端口号,cb回调)方法，即可启动 web服务器</span></span>
<span class="line"><span style="color:#A6ACCD;">server.listen(80, () =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log( &#39;http server running at http://127.0.0.1&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">})</span></span></code></pre></div><h2 id="根据不同-url-响应不同-html-内容" tabindex="-1">根据不同 url 响应不同 html 内容 <a class="header-anchor" href="#根据不同-url-响应不同-html-内容" aria-label="Permalink to &quot;根据不同 url 响应不同 html 内容&quot;">​</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">server.on(&quot;request&quot;, function(req,res) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    const url = req.url // 1. 获取请求的url地址</span></span>
<span class="line"><span style="color:#A6ACCD;">    let content = &#39;&lt;h1&gt;404 Not found!&lt;/h1&gt;&#39; // 2. 设置默认的内客为 404 Not found</span></span>
<span class="line"><span style="color:#A6ACCD;">    if (url === &#39;/&#39; || url === &#39;/index.html&#39;) {</span></span>
<span class="line"><span style="color:#A6ACCD;">        content = &quot;&lt;h1&gt;首页&lt;/h1&gt;&#39; // 3. 用户请求的是首页</span></span>
<span class="line"><span style="color:#A6ACCD;">    else if (url === &#39;/about.html&#39;) {</span></span>
<span class="line"><span style="color:#A6ACCD;">        content = &quot;&lt;h1&gt;关于页面&lt;/h1&gt;&#39; // 4. 用户请求的是关于页面</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">    res.setHeader(&#39;Content-Type&#39; ,&#39;text/html;charset=utf-8&#39;) // 5. 设置 Content-Type响应头，防止中文乱码</span></span>
<span class="line"><span style="color:#A6ACCD;">    res.end(content) // 6. 把内容发送给客户端</span></span>
<span class="line"><span style="color:#A6ACCD;">})</span></span></code></pre></div>`,12),o=[t];function p(r,c,i,h,d,u){return a(),e("div",null,o)}const b=s(l,[["render",p]]);export{A as __pageData,b as default};
