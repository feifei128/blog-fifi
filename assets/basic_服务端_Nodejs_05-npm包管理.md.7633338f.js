import{_ as l,c as a,o as e,V as s}from"./chunks/framework.987d87f6.js";const g=JSON.parse('{"title":"npm 包管理工具","description":"","frontmatter":{},"headers":[],"relativePath":"basic/服务端/Nodejs/05-npm包管理.md","filePath":"basic/服务端/Nodejs/05-npm包管理.md"}'),n={name:"basic/服务端/Nodejs/05-npm包管理.md"},o=s(`<h1 id="npm-包管理工具" tabindex="-1">npm 包管理工具 <a class="header-anchor" href="#npm-包管理工具" aria-label="Permalink to &quot;npm 包管理工具&quot;">​</a></h1><h2 id="包-简介" tabindex="-1">包 -- 简介 <a class="header-anchor" href="#包-简介" aria-label="Permalink to &quot;包 -- 简介&quot;">​</a></h2><ul><li>a. 含义：Nodejs 中第三方模块就叫做包。免费且开源。</li><li>b. 意义：Nodejs 内置模块只提供了底层 API，开发效率低。</li><li>c. npm 包搜索途径：<a href="https://www.npmjs.com/" target="_blank" rel="noreferrer">https://www.npmjs.com/</a></li><li>d. npm 包下载途径：<a href="http://registry.npmjs.org/" target="_blank" rel="noreferrer">http://registry.npmjs.org/</a></li></ul><h2 id="npm-初体验" tabindex="-1">npm 初体验 <a class="header-anchor" href="#npm-初体验" aria-label="Permalink to &quot;npm 初体验&quot;">​</a></h2><h3 id="a-格式化时间案例" tabindex="-1">a. 格式化时间案例 <a class="header-anchor" href="#a-格式化时间案例" aria-label="Permalink to &quot;a. 格式化时间案例&quot;">​</a></h3><ul><li>ⅰ. 步骤（2022 年用 day.js 替代 moment） <ul><li>使用 npm 包管理工具,在项目中安装格式化时间的包 moment</li><li>使用 require() 导入格式化时间的包</li><li>参考 moment 官方 API 文档对时间进行格式化</li></ul></li><li>ⅱ. 代码</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">// 1. 导入 monent 包</span></span>
<span class="line"><span style="color:#A6ACCD;">const moment = reqaire(&#39;moment&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">// 2. 参考 moment 官方 API</span></span>
<span class="line"><span style="color:#A6ACCD;">const dt = moment().fomat(&#39;YYY-MM-DD HH:mm:ss&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(dt)</span></span></code></pre></div><ul><li>ⅲ 在项目中安装包</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm install 包名</span></span>
<span class="line"><span style="color:#A6ACCD;">npm i 包名</span></span>
<span class="line"><span style="color:#A6ACCD;">npm i 包名@版本号</span></span></code></pre></div><h3 id="b-下载包的同时自动创建了两个文件" tabindex="-1">b. 下载包的同时自动创建了两个文件 <a class="header-anchor" href="#b-下载包的同时自动创建了两个文件" aria-label="Permalink to &quot;b. 下载包的同时自动创建了两个文件&quot;">​</a></h3><ul><li>ⅰ. <code>node_modules</code> 文件夹：存放下载的所有第三方包</li><li>ⅱ. <code>package-lock.json</code> 配置文件：记录 <code>node_modules</code> 目录下每个包的下载信息，如包名、版本号、下载地址等。</li><li>ⅲ. 注：这两个文件不需要手动修改，npm 会自动维护。</li></ul><h3 id="c-package-json-包管理配置文件" tabindex="-1">c. <code>package.json</code> 包管理配置文件 <a class="header-anchor" href="#c-package-json-包管理配置文件" aria-label="Permalink to &quot;c. \`package.json\` 包管理配置文件&quot;">​</a></h3><ul><li>ⅰ. 含义：放在项目的根目录中，记录与项目有关的配置信息。</li><li>ⅱ. 多人协作：在上传 git 时，要剔除 <code>node_modules</code> 文件夹（过大），同时在 <code>package.json</code> 中记录都用了哪些包。所以在实际项目开发中，一定要把 <code>node_modules</code> 文件夹添加到<code>.gitignore</code> 忽略文件中。</li><li>ⅲ. 快速创建：</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm init -y                # 注意：目录必须英文且无空格</span></span></code></pre></div><ul><li>ⅳ. <code>dependencies</code> 节点：记录 npm 装了哪些包（项目开发和上线都用）。</li><li>ⅴ. 为拉取到的项目一次性安装包：</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm i</span></span></code></pre></div><ul><li>ⅵ. 卸载包：</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm uninstall 包名</span></span></code></pre></div><ul><li>ⅶ. <code>devDependencies</code> 节点 <ul><li>含义：记录只在项目开发阶段用，但项目上线后不用的包。</li><li>安装包到该节点下：</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm i 包名 -D</span></span></code></pre></div></li></ul><h3 id="d-解决问题-包下载慢" tabindex="-1">d. 解决问题 -- 包下载慢 <a class="header-anchor" href="#d-解决问题-包下载慢" aria-label="Permalink to &quot;d. 解决问题 -- 包下载慢&quot;">​</a></h3><ul><li>ⅰ. 淘宝 npm 镜像服务器</li><li>ⅱ. 切换 npm 的下包镜像源 <ul><li>方法一</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm config set registry=http://registry.npm.taobao.org/</span></span></code></pre></div><ul><li>方法二：nrm 工具</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"># 通过 npm包含理器,将nrm安装为全局可用的工具</span></span>
<span class="line"><span style="color:#A6ACCD;">npm i nrm -g</span></span>
<span class="line"><span style="color:#A6ACCD;"># 查看所有可用的镜像源</span></span>
<span class="line"><span style="color:#A6ACCD;">nrm ls</span></span>
<span class="line"><span style="color:#A6ACCD;"># 将下包的镜像源切换为 taobao 镜像</span></span>
<span class="line"><span style="color:#A6ACCD;">nrm use taobao</span></span></code></pre></div></li></ul><h3 id="e-包的分类" tabindex="-1">e. 包的分类 <a class="header-anchor" href="#e-包的分类" aria-label="Permalink to &quot;e. 包的分类&quot;">​</a></h3><ul><li>ⅰ. 项目包 <ul><li><ol><li>开发依赖包：被记录到 <code>devDenpendencies</code> 节点</li></ol></li><li><ol start="2"><li>核心依赖包：被记录到 <code>denpendencies</code> 节点</li></ol></li></ul></li><li>ⅱ. 全局包 <ul><li><ol><li>含义：安装时提供了<code>-g</code> 参数。只有工具性质的包才需要全局安装，每个包如何安装，官方都会提供 install 说明。</li></ol></li><li><ol start="2"><li>例子 <ul><li>a. nrm：切换下包镜像</li><li>b. i5ting_toc：把 md 文档转为 html 页面</li></ul></li></ol></li></ul></li></ul><h3 id="f-发布包" tabindex="-1">f. 发布包 <a class="header-anchor" href="#f-发布包" aria-label="Permalink to &quot;f. 发布包&quot;">​</a></h3><ul><li>ⅰ. 新建三个文件 <ul><li><ol><li><code>package.json</code></li></ol></li><li><ol start="2"><li><code>index.js</code>（用来写这个包主要提供的功能，如转义 HTML）</li></ol></li><li><ol start="3"><li><code>REANME.md</code> 说明文档</li></ol></li></ul></li><li>ⅱ. 模块化拆分：将上面 <code>index.js</code> 中写的多个功能进行拆分，然后在 <code>index.js</code> 中导入若干模块，再用 <code>module.exports</code> 把这些功能的方法共享出去。</li><li>ⅲ. 发布到 npm <ul><li><ol><li>注册 npm 账号</li></ol></li><li><ol start="2"><li>在终端登录 npm 账号：<code>npm login</code>（在运行之前，必须把下包服务器切换为官方的 nrm use npm）</li></ol></li><li><ol start="3"><li>将终端切换到包的根目录，运行 <code>npm publish</code> 命令。</li></ol></li><li><ol start="4"><li>删除已发布的包：<code>npm unpublish 包名 --force</code>（只能删除 72 小时内发布的包，且在 24 小时不能重新发布）</li></ol></li></ul></li></ul>`,25),i=[o];function t(p,c,d,r,m,u){return e(),a("div",null,i)}const C=l(n,[["render",t]]);export{g as __pageData,C as default};
