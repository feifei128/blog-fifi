import{_ as s,c as e,o as a,a4 as p}from"./chunks/framework.C8gDNRqg.js";const g=JSON.parse('{"title":"Express","description":"","frontmatter":{},"headers":[],"relativePath":"basic/服务端/Nodejs/06-Express.md","filePath":"basic/服务端/Nodejs/06-Express.md"}'),i={name:"basic/服务端/Nodejs/06-Express.md"},t=p(`<h1 id="express" tabindex="-1">Express <a class="header-anchor" href="#express" aria-label="Permalink to &quot;Express&quot;">​</a></h1><h2 id="含义" tabindex="-1">含义 <a class="header-anchor" href="#含义" aria-label="Permalink to &quot;含义&quot;">​</a></h2><p>基于 Node.js 的 Web 开发框架。</p><h2 id="创建服务器流程" tabindex="-1">创建服务器流程 <a class="header-anchor" href="#创建服务器流程" aria-label="Permalink to &quot;创建服务器流程&quot;">​</a></h2><ul><li>ⅰ. 安装</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm i express</span></span></code></pre></div><ul><li>ⅱ. 导入</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const express = require(&#39;express&#39;)</span></span></code></pre></div><ul><li>ⅲ. 创建 web 服务器</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const app = express()</span></span></code></pre></div><ul><li>ⅳ. 启动服务器</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>app.listen(80, () =&gt; {</span></span>
<span class="line"><span>    console.log(&#39;express server running at http://127.0.0.1&#39;)</span></span>
<span class="line"><span>})</span></span></code></pre></div><h2 id="express-基本方法" tabindex="-1">Express 基本方法 <a class="header-anchor" href="#express-基本方法" aria-label="Permalink to &quot;Express 基本方法&quot;">​</a></h2><ul><li>ⅰ. <code>app.get()</code>：可以监听客户端 GET 请求。</li><li>ⅱ. <code>app.post()</code>：可以监听客户端 POST 请求。</li><li>ⅲ. <code>res.send()</code>：响应客户端。</li><li>ⅳ. <code>req.query()</code>：存储链接传值中的变量。</li><li>ⅴ. <code>req.param()</code>：存储 url 中通过 “：” 匹配的动态参数</li></ul><h2 id="托管静态资源" tabindex="-1">托管静态资源 <a class="header-anchor" href="#托管静态资源" aria-label="Permalink to &quot;托管静态资源&quot;">​</a></h2><ul><li><p>ⅰ. <code>express.static()</code>：创建一个静态资源服务器，参数为文件夹名称。代码如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>app.use(express.static(&#39;public&#39;))</span></span></code></pre></div></li><li><p>ⅱ. 托管多个静态资源目录：上述代码写两次就可以了。先写的优先级更高。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>app.use(express.static(&#39;public&#39;))</span></span>
<span class="line"><span>app.use(express.static(&#39;files&#39;))</span></span></code></pre></div></li><li><p>ⅲ. 挂载路径前缀：若不挂载，访问路径 url 中是不存在静态资源目录的。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>app.use(&#39;/public&#39;, express.static(&#39;public&#39;))</span></span></code></pre></div></li></ul>`,16),l=[t];function n(c,o,d,r,h,u){return a(),e("div",null,l)}const v=s(i,[["render",n]]);export{g as __pageData,v as default};
