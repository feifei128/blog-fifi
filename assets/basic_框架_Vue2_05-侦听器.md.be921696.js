import{_ as a,c as e,o as t,V as c}from"./chunks/framework.987d87f6.js";const o="/blog-fifi/images/watch方法格式.png",i="/blog-fifi/images/watch对象格式.png",b=JSON.parse('{"title":"侦听器 (watch)","description":"","frontmatter":{},"headers":[],"relativePath":"basic/框架/Vue2/05-侦听器.md","filePath":"basic/框架/Vue2/05-侦听器.md"}'),r={name:"basic/框架/Vue2/05-侦听器.md"},s=c('<h1 id="侦听器-watch" tabindex="-1">侦听器 (<code>watch</code>) <a class="header-anchor" href="#侦听器-watch" aria-label="Permalink to &quot;侦听器 (`watch`)&quot;">​</a></h1><h2 id="含义" tabindex="-1">含义 <a class="header-anchor" href="#含义" aria-label="Permalink to &quot;含义&quot;">​</a></h2><p>监听数据的变化，做出特定操作。本质是个函数，函数名为要监听的数据。</p><h2 id="写法" tabindex="-1">写法 <a class="header-anchor" href="#写法" aria-label="Permalink to &quot;写法&quot;">​</a></h2><p>在 vm 对象中定义 <code>watch: { ... }</code></p><ul><li><p>方法格式：操作简单，开发中首选。</p><p><img src="'+o+`" alt="avatar"></p><pre><code>缺点 1：没办法在一开始就自动触发。
缺点 2：如果侦听的是对象，对象属性发生变化是侦听不到的。
</code></pre></li><li><p>对象格式：</p><p><img src="`+i+'" alt="avatar"></p><pre><code>优点 1：可以用 `immediate` 选项设置自动触发。\n优点 2：可以用 `deep` 选项设置是否侦听到对象属性的变化。\n</code></pre><ul><li>注意：当侦听的对象是对象属性，侦听时要用单引号圈起来。</li></ul></li></ul>',6),_=[s];function l(n,d,p,h,m,u){return t(),e("div",null,_)}const g=a(r,[["render",l]]);export{b as __pageData,g as default};
