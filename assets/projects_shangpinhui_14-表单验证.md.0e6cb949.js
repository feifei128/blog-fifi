import{_ as i,o as a,c as l,V as e}from"./chunks/framework.f3592640.js";const s="/blog-fifi/images/表单验证1.png",t="/blog-fifi/images/表单验证2.png",o="/blog-fifi/images/表单验证3.png",n="/blog-fifi/images/表单验证4.png",p="/blog-fifi/images/表单验证5.png",g="/blog-fifi/images/表单验证6.png",r="/blog-fifi/images/表单验证7.png",c="/blog-fifi/images/表单验证8.png",m="/blog-fifi/images/表单验证9.png",_="/blog-fifi/images/表单验证10.png",u="/blog-fifi/images/表单验证11.png",d="/blog-fifi/images/表单验证12.png",A=JSON.parse('{"title":"表单验证 -- vee-validate 插件","description":"","frontmatter":{},"headers":[],"relativePath":"projects/shangpinhui/14-表单验证.md","filePath":"projects/shangpinhui/14-表单验证.md"}'),f={name:"projects/shangpinhui/14-表单验证.md"},h=e('<h1 id="表单验证-vee-validate-插件" tabindex="-1">表单验证 -- <strong>vee-validate 插件</strong> <a class="header-anchor" href="#表单验证-vee-validate-插件" aria-label="Permalink to &quot;表单验证 -- **vee-validate 插件**&quot;">​</a></h1><h2 id="_1-1-安装" tabindex="-1">1.1 安装 <a class="header-anchor" href="#_1-1-安装" aria-label="Permalink to &quot;1.1 安装&quot;">​</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm i vee-validate@2 --save</span></span></code></pre></div><h2 id="_1-2-使用" tabindex="-1">1.2. 使用 <a class="header-anchor" href="#_1-2-使用" aria-label="Permalink to &quot;1.2. 使用&quot;">​</a></h2><p>可以像上面一样在 main.js 里引入和注册，但是大型项目中所有东西都在 main.js 里注册太乱了，所以新建 src/plugins/validate.js，在这里引入注册并且配置好表单验证的需求，最后再去 main.js 写一句引入代码即可。然后去带有表单验证的页面把页面结构完善好。</p><ul><li>引入和注册：</li></ul><p><img src="'+s+'" alt="image.png"></p><ul><li>配置提示验证结果的中文属性</li></ul><p><img src="'+t+'" alt="image.png"></p><ul><li>在 main.js 引入：</li></ul><p><img src="'+o+'" alt="image.png"></p><ul><li>去带有表单验证的页面（Register 模块）修改页面结构：以注册页面的<strong>填写手机号</strong>为例，下图中红框内容为新增代码。</li></ul><p><img src="'+n+'" alt="image.png"></p><ul><li><p>效果</p><ul><li><ol><li>没有输入内容时：</li></ol></li></ul><p><img src="'+p+'" alt="image.png"></p><ul><li><ol start="2"><li>输入内容不符合正则表达式时：</li></ol></li></ul><p><img src="'+g+'" alt="image.png"></p><ul><li><ol start="3"><li>输入内容完全合法时：</li></ol></li></ul><p><img src="'+r+'" alt="image.png"></p></li></ul><h2 id="_1-3-注意不同类型的表单验证" tabindex="-1">1.3 注意不同类型的表单验证： <a class="header-anchor" href="#_1-3-注意不同类型的表单验证" aria-label="Permalink to &quot;1.3 注意不同类型的表单验证：&quot;">​</a></h2><ul><li>填写手机号、密码时，只需要验证是否符合对应的正则表达式。</li></ul><p><img src="'+c+'" alt="image.png"></p><ul><li>填写确认密码时只需验证是否和第一次输入的密码一致。</li></ul><p><img src="'+m+'" alt="image.png"></p><ul><li>勾选协议时，要在 validate.js 里自定义验证规则，只有勾选状态为 true 才能通过验证。</li></ul><p><img src="'+_+'" alt="image.png"></p><p><img src="'+u+'" alt="image.png"></p><ul><li>填写验证码时，要符合正则表达式，且验证码和服务器传递的一致。下图中，code 是对验证码文本框的双向绑定变量，codeTrue 是直接从服务器请求到的验证码。如果不设置 codeTrue，将无法判断验证码是否输入正确。因为存在这样一种情况：用户不点击“获取验证码”按钮，直接在文本框进行输入，此时还没有向服务器请求过验证码，this.code 是完全由用户输入的，无从判断，所以在注册之前，必须至少请求过一次验证码。</li></ul><p><img src="'+d+'" alt="image.png"></p>',24),b=[h];function v(j,q,P,T,k,x){return a(),l("div",null,b)}const S=i(f,[["render",v]]);export{A as __pageData,S as default};
