import{_ as a,c as i,J as e,a4 as t,o as h,E as n}from"./chunks/framework.C8gDNRqg.js";const u=JSON.parse('{"title":"02-Git的使用","description":"","frontmatter":{"title":"02-Git的使用"},"headers":[],"relativePath":"basic/前端工具/02-Git的使用.md","filePath":"basic/前端工具/02-Git的使用.md"}'),l={name:"basic/前端工具/02-Git的使用.md"},p=t(`<h1 id="git" tabindex="-1">Git <a class="header-anchor" href="#git" aria-label="Permalink to &quot;Git&quot;">​</a></h1><h2 id="_1-常见操作" tabindex="-1">1. 常见操作 <a class="header-anchor" href="#_1-常见操作" aria-label="Permalink to &quot;1. 常见操作&quot;">​</a></h2><h3 id="全局配置用户信息" tabindex="-1">全局配置用户信息 <a class="header-anchor" href="#全局配置用户信息" aria-label="Permalink to &quot;全局配置用户信息&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;smyhvae&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.email</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;smyhvae@163.com&quot;</span></span></code></pre></div><h2 id="_2-分支的合并" tabindex="-1">2. 分支的合并 <a class="header-anchor" href="#_2-分支的合并" aria-label="Permalink to &quot;2. 分支的合并&quot;">​</a></h2><h3 id="_2-1-场景-基于-master-分支的代码-开发一个新的特性" tabindex="-1">2.1 场景：基于 master 分支的代码，开发一个新的特性 <a class="header-anchor" href="#_2-1-场景-基于-master-分支的代码-开发一个新的特性" aria-label="Permalink to &quot;2.1 场景：基于 master 分支的代码，开发一个新的特性&quot;">​</a></h3><p>如果直接在 master 分支上开发新特性，是不够安全的，万一在开发<code>特性1</code>的时候，领导突然又要叫你去开发<code>特性2</code>，就不好处理了。难道开发的两个特性都提交到 master？一会儿提交特性 1 的 commit，一会儿提交特性 2 的 commit？这会导致 commit 记录很混乱。</p><p>所以建议的做法是：给每个特性都单独建一个新的分支。</p><p>比如说，我专门给<code>特性1</code>建一个分支<code>feature_item_recommend</code>。具体做法如下：</p><p>（1）基于 master 分支，创建一个新的分支，起名为<code>feature_item_recommend</code>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feature_item_recommend</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Switched</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;feature_item_recommend&#39;</span></span></code></pre></div><p>上面这行命令，相当于：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feature_item_recommend</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 创建新的分支</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feature_item_recommend</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  //切换到新的分支</span></span></code></pre></div><p>（2）在新的分支<code>feature_item_recommend</code>上，完成开发工作，并 commit 、push。</p><p>（3）将分支<code>feature_item_recommend</code>上的开发进度<strong>合并</strong>到 master 分支：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  //切换到master分支</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> merge</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feature_item_recommend</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    //将分支</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feature_item_recommend</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 的开发进度合并到</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 分支</span></span></code></pre></div><p>合并之后，<code>master</code>分支和<code>feature_item_recommend</code>分支会指向同一个位置。</p><p>（3）删除分支<code>feature_item_recommend</code>：</p><blockquote><p>既然 特性 1 开发完了，也放心地提交到 master 了，那我们就可以将这个分支删除了。</p></blockquote><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feature_item_recommend</span></span></code></pre></div><p>注意，我们当前是处于<code>master</code>分支的位置，来删除<code>feature_item_recommend</code>分支。如果当前是处于<code>feature_item_recommend</code>分支，是没办法删除它自己的。</p><p>同理，当我转身去开发<code>特性2</code>的时候，也是采用同样的步骤。</p><h3 id="_2-2-解决合并时发生的冲突" tabindex="-1">2.2 解决合并时发生的冲突 <a class="header-anchor" href="#_2-2-解决合并时发生的冲突" aria-label="Permalink to &quot;2.2 解决合并时发生的冲突&quot;">​</a></h3><p>如果 feature1 和 feature2 修改的是同一个文件中<strong>代码的同一个位置</strong>，那么，把 feature1 合并到 feature2 时，就会产生冲突。这个冲突需要人工解决。叫上相关开发人员，共同协调需要保留哪部分新代码。</p><h2 id="_3-日常操作积累" tabindex="-1">3. 日常操作积累 <a class="header-anchor" href="#_3-日常操作积累" aria-label="Permalink to &quot;3. 日常操作积累&quot;">​</a></h2><h3 id="_3-1-修改密码-曲线救国" tabindex="-1">3.1 修改密码（曲线救国） <a class="header-anchor" href="#_3-1-修改密码-曲线救国" aria-label="Permalink to &quot;3.1 修改密码（曲线救国）&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置当前仓库的用户名为空</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  user.name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span></span></code></pre></div><p>然后，当我们再输入<code>git pull</code>等命令行时，就会被要求重新输入<em>新的</em>账号密码。此时，密码就可以修改成功了。最后，我们还要输入如下命令，还原当前仓库的用户名：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;smyhvae&quot;</span></span></code></pre></div><h3 id="_3-2-将-branch1的某个commit1合并到branch2当中" tabindex="-1">3.2 将 <code>branch1</code>的某个<code>commit1</code>合并到<code>branch2</code>当中 <a class="header-anchor" href="#_3-2-将-branch1的某个commit1合并到branch2当中" aria-label="Permalink to &quot;3.2 将 \`branch1\`的某个\`commit1\`合并到\`branch2\`当中&quot;">​</a></h3><p>切换到 branch2 中，然后执行如下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cherry-pick</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit1</span></span></code></pre></div><h3 id="_3-3-提交代码时-绕过-eslint-检查" tabindex="-1">3.3 提交代码时，绕过 eslint 检查 <a class="header-anchor" href="#_3-3-提交代码时-绕过-eslint-检查" aria-label="Permalink to &quot;3.3 提交代码时，绕过 eslint 检查&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;xxx&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-verify</span></span></code></pre></div><p>这样的操作属于合法但不建议。</p><h2 id="_4-工具" tabindex="-1">4. 工具 <a class="header-anchor" href="#_4-工具" aria-label="Permalink to &quot;4. 工具&quot;">​</a></h2><h3 id="oh-my-zsh" tabindex="-1"><code>Oh My Zsh</code> <a class="header-anchor" href="#oh-my-zsh" aria-label="Permalink to &quot;\`Oh My Zsh\`&quot;">​</a></h3><p>封装了 git 常用的快捷键，见<a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/git" target="_blank" rel="noreferrer">官方文档</a></p>`,38);function r(k,o,d,c,F,g){const s=n("ArticleTopAd");return h(),i("div",null,[e(s),p])}const b=a(l,[["render",r]]);export{u as __pageData,b as default};
