import{_ as s,c as a,o as e,a4 as i,a5 as t,a6 as o}from"./chunks/framework.C8gDNRqg.js";const g=JSON.parse('{"title":"Webpack","description":"","frontmatter":{},"headers":[],"relativePath":"basic/工程化/Webpack/01-开始.md","filePath":"basic/工程化/Webpack/01-开始.md"}'),p={name:"basic/工程化/Webpack/01-开始.md"},c=i(`<h1 id="webpack" tabindex="-1">Webpack <a class="header-anchor" href="#webpack" aria-label="Permalink to &quot;Webpack&quot;">​</a></h1><blockquote><p>学习本节笔记，首先要了解一个问题：Webpack 是干什么用的？</p></blockquote><blockquote><p>Webpack 的主要功能：提供友好的前端模块化开发支持，以及代码压缩混淆、处理浏览器端 JS 的兼容性、性能优化等。</p></blockquote><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><p>以 npm 的安装方法为例：<code>npm i webpack@5.42.1 webpack-cli@4.7.2 -D</code></p><h2 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h2><ol><li>在项目根目录创建名为 <code>webpack.config.js</code> 的配置文件，并初始化如下，<code>mode</code> 的值，在项目开发阶段设置 <code>development</code> ，项目上线后用 <code>production</code>。</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;development&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // mode用来指定构建模式，可选 development 和 production</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="2"><li>在 <code>package.json</code> 的 <code>scripts</code> 节点下新增dev脚本如下:</li></ol><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;webpack&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //script节点下的脚本，可以通过 npm run 执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="3"><li>在终端运行 <code>npm run</code> 脚本名，也可以在<code>package.json</code>的<code>scripts</code>节点处鼠标操作。</li></ol><p><img src="`+t+'" alt=""></p><ol start="4"><li>默认情况下，webpack 从 <code>src/index.js</code> 开始打包，并存入 <code>dist/main.js</code> 中，但也可以自定义，在 <code>webpack.confis.js</code> 配置文件中设置<code>entry</code>、<code>output</code>节点，如下</li></ol><p><img src="'+o+'" alt=""></p>',14),n=[c];function l(d,h,k,r,u,b){return e(),a("div",null,n)}const E=s(p,[["render",l]]);export{g as __pageData,E as default};
