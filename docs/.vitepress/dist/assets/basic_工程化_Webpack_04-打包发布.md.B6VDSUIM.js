import{_ as a,c as e,o as c,a4 as o,ac as t,ad as i,ae as s}from"./chunks/framework.C8gDNRqg.js";const k=JSON.parse('{"title":"打包发布","description":"","frontmatter":{},"headers":[],"relativePath":"basic/工程化/Webpack/04-打包发布.md","filePath":"basic/工程化/Webpack/04-打包发布.md"}'),l={name:"basic/工程化/Webpack/04-打包发布.md"},r=o('<h1 id="打包发布" tabindex="-1">打包发布 <a class="header-anchor" href="#打包发布" aria-label="Permalink to &quot;打包发布&quot;">​</a></h1><h2 id="_1-配置" tabindex="-1">1. 配置 <a class="header-anchor" href="#_1-配置" aria-label="Permalink to &quot;1. 配置&quot;">​</a></h2><p>在 package.json 文件的 <code>scirpts</code> 节点中，增加 <code>build</code> 命令。如下配置（build 里面设置的运行模式会覆盖 webpack.config.js 里的 <code>mode</code> 设置）</p><p><img src="'+t+'" alt=""></p><h2 id="_2-优化打包后的目录结构" tabindex="-1">2. 优化打包后的目录结构 <a class="header-anchor" href="#_2-优化打包后的目录结构" aria-label="Permalink to &quot;2. 优化打包后的目录结构&quot;">​</a></h2><ul><li>在 webpack.config.js 文件中生成 js 文件夹：</li></ul><p><img src="'+i+'" alt=""></p><ul><li>生成 images 文件夹：在 webpack.config.js 文件中配置<code>loader</code>时用查询字符串的方式设置参数。</li></ul><p><img src="'+s+'" alt=""></p><h2 id="_3-每次发布时自动清理旧文件" tabindex="-1">3. 每次发布时自动清理旧文件 <a class="header-anchor" href="#_3-每次发布时自动清理旧文件" aria-label="Permalink to &quot;3. 每次发布时自动清理旧文件&quot;">​</a></h2><ul><li>安装插件 <code>clean-webpack-plugin</code></li><li>配置（按照官网使用教程即可）</li></ul>',11),_=[r];function d(n,p,h,u,m,b){return c(),e("div",null,_)}const g=a(l,[["render",d]]);export{k as __pageData,g as default};
