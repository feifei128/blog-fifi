import{_ as s,c as a,o as e,V as n}from"./chunks/framework.987d87f6.js";const l="/blog-fifi/images/路由.png",_=JSON.parse('{"title":"路由","description":"","frontmatter":{},"headers":[],"relativePath":"basic/服务端/Nodejs/07-路由.md","filePath":"basic/服务端/Nodejs/07-路由.md"}'),o={name:"basic/服务端/Nodejs/07-路由.md"},p=n('<h1 id="路由" tabindex="-1">路由 <a class="header-anchor" href="#路由" aria-label="Permalink to &quot;路由&quot;">​</a></h1><h2 id="含义" tabindex="-1">含义 <a class="header-anchor" href="#含义" aria-label="Permalink to &quot;含义&quot;">​</a></h2><p>客户端请求与服务器处理函数之间的映射关系。由 3 部分组成，分别是请求类型 method、请求 URL、处理函数。</p><h2 id="路由匹配过程" tabindex="-1">路由匹配过程 <a class="header-anchor" href="#路由匹配过程" aria-label="Permalink to &quot;路由匹配过程&quot;">​</a></h2><p><img src="'+l+`" alt="avatar"></p><h2 id="用法" tabindex="-1">用法 <a class="header-anchor" href="#用法" aria-label="Permalink to &quot;用法&quot;">​</a></h2><p>挂载到 app 上：这个方法最简单，但实际不常用，太笨拙。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">//挂载路由</span></span>
<span class="line"><span style="color:#A6ACCD;">app.get(&#39;/&#39;, (req, res) =&gt; { res.send(&#39;Hello world.&#39;) })</span></span>
<span class="line"><span style="color:#A6ACCD;">app.post(&#39;/&#39;, (req, res) =&gt; { res.send(&#39;Post Request.&#39;) })</span></span></code></pre></div><h2 id="模块化路由" tabindex="-1">模块化路由 <a class="header-anchor" href="#模块化路由" aria-label="Permalink to &quot;模块化路由&quot;">​</a></h2><ul><li>步骤 <ul><li>创建路由模块对应的 <code>.js</code> 文件</li><li>调用 <code>express.Router()</code> 函数创建路由对象</li><li>向路由对象上挂载具体的路由</li><li>使用 <code>module.exports</code> 向外共亨路由对象</li><li>使用 <code>app.use()</code>函数注册路由模块</li></ul></li><li>代码 -- 创建及共享路由</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">var express = require(&#39;express&#39;)              // 1. 导入 express</span></span>
<span class="line"><span style="color:#A6ACCD;">var router = express.Router()                 // 2．创建路由对象</span></span>
<span class="line"><span style="color:#A6ACCD;">router.get(&#39;/user/list&#39;，function (req, res){ // 3.挂载获取用户列表的路由</span></span>
<span class="line"><span style="color:#A6ACCD;">    res.send( &#39;Get user list.&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">})</span></span>
<span class="line"><span style="color:#A6ACCD;">router.post( &#39;/user/add&#39;, function (req,res){ // 4．挂载添加用户的路由</span></span>
<span class="line"><span style="color:#A6ACCD;">    res.send( &#39;Add new user.&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">})</span></span>
<span class="line"><span style="color:#A6ACCD;">module.exports = router                       // 5.向外导出路由对象</span></span></code></pre></div><ul><li>代码 -- 注册路由（另一个 js 文件）</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">// 1. 导入路由模块</span></span>
<span class="line"><span style="color:#A6ACCD;">const router = require(&#39;./03.router&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">// 2. 注册路由模块</span></span>
<span class="line"><span style="color:#A6ACCD;">app.use(router)</span></span></code></pre></div><ul><li>为路由模块添加前缀，和托管静态资源写路径前缀是一样的。</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">// 2. 使用app.use()注册路由模块,并添加统一的访问前级 /api</span></span>
<span class="line"><span style="color:#A6ACCD;">app.use(&#39;/api&#39;, userRouter)</span></span></code></pre></div>`,15),t=[p];function r(i,c,d,u,C,h){return e(),a("div",null,t)}const m=s(o,[["render",r]]);export{_ as __pageData,m as default};
