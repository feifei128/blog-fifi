import{_ as a,c as e,o as l,V as o}from"./chunks/framework.987d87f6.js";const P=JSON.parse('{"title":"跨域","description":"","frontmatter":{},"headers":[],"relativePath":"basic/服务端/Nodejs/09-跨域.md","filePath":"basic/服务端/Nodejs/09-跨域.md"}'),t={name:"basic/服务端/Nodejs/09-跨域.md"},i=o(`<h1 id="跨域" tabindex="-1">跨域 <a class="header-anchor" href="#跨域" aria-label="Permalink to &quot;跨域&quot;">​</a></h1><h2 id="cors-跨域资源共享" tabindex="-1">CORS 跨域资源共享 <a class="header-anchor" href="#cors-跨域资源共享" aria-label="Permalink to &quot;CORS 跨域资源共享&quot;">​</a></h2><p>配置 CORS 中间件</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">// 一定要在路由之前，配置 cors 这个中间件,从而解决接口跨域的问题</span></span>
<span class="line"><span style="color:#A6ACCD;">const cors = require(&#39;cors&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">app.use(cors())</span></span></code></pre></div><p>需要注意以下两点：</p><ul><li><ol><li>在服务器端进行配置。</li></ol></li><li><ol start="2"><li>有兼容性，支持 IE10+、Chrome4+、FireFox3.5+ 。</li></ol></li></ul><h3 id="请求分类" tabindex="-1">请求分类 <a class="header-anchor" href="#请求分类" aria-label="Permalink to &quot;请求分类&quot;">​</a></h3><ol><li><p>简单请求：要同时满足以下两大条件。</p><ul><li>请求方式:GET、POST、HEAD 三者之一</li><li>HTTP 头部信息不超过以下几种字段:无自定义头部字段、Accept、Accept-Language、Content-Language、DPR.Downlink、Save-Data、Viewport-Width、Width, Content-Type(只有三个值 application/x-www-form- urlencoded、multipart/form-data、text/plain)</li></ul></li><li><p>预检请求：简单请求的对立面，只要符合以下任何一个条件的请求。</p><ul><li>请求方式为 GET、POST、HEAD 之外的请求 Method 类型</li><li>请求头中包含自定义头部字段</li><li>向服务器发送了 application/json 格式的数据</li></ul></li></ol><p>二者区别</p><ul><li>简单请求的特点: 客户端与服务器之间只会发生一次请求。</li><li>预检请求的特点: 客户端与服务器之间会发生两次请求,OPTION 预检请求成功之后，才会发起真正的请求。</li></ul><h2 id="jsonp" tabindex="-1">JSONP <a class="header-anchor" href="#jsonp" aria-label="Permalink to &quot;JSONP&quot;">​</a></h2><h3 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h3><p>浏览器端通过<code>&lt;script&gt;</code>标签的<code>src</code>属性，请求服务器上的数据，同时，服务器返回一个函数的调用。这种请求数据的方式叫做 JSONP.</p><h3 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h3><ul><li>JSONP 不属于真正的 <code>Ajax</code> 请求，因为它没有使用 <code>XMLHttpRequest</code> 这个对象。</li><li>JSONP 仅支持 <code>GET</code> 请求,不支持 <code>POST</code>、<code>PUT</code>、<code>DELETE</code> 等请求。</li></ul>`,15),s=[i];function c(n,r,d,p,h,u){return l(),e("div",null,s)}const m=a(t,[["render",c]]);export{P as __pageData,m as default};
