import{_ as e,c as a,o as r,a4 as t,aQ as i,aR as s,aS as l,aT as o}from"./chunks/framework.C8gDNRqg.js";const T=JSON.parse('{"title":"ref","description":"","frontmatter":{},"headers":[],"relativePath":"basic/框架/Vue2/14-ref.md","filePath":"basic/框架/Vue2/14-ref.md"}'),_={name:"basic/框架/Vue2/14-ref.md"},c=t('<h1 id="ref" tabindex="-1">ref <a class="header-anchor" href="#ref" aria-label="Permalink to &quot;ref&quot;">​</a></h1><h2 id="ref到底有什么作用" tabindex="-1">ref到底有什么作用？ <a class="header-anchor" href="#ref到底有什么作用" aria-label="Permalink to &quot;ref到底有什么作用？&quot;">​</a></h2><p>引用DOM元素，引用组件。</p><h2 id="如何使用呢" tabindex="-1">如何使用呢？ <a class="header-anchor" href="#如何使用呢" aria-label="Permalink to &quot;如何使用呢？&quot;">​</a></h2><ul><li><p>引用DOM <img src="'+i+'" alt=""><img src="'+s+'" alt=""></p></li><li><p>引用组件：和引用DOM的原理一样，使用this.$refs.组件ref名.$refs.DOMref名 <img src="'+l+'" alt=""></p></li><li><p>！！注意！！</p><ul><li>问题描述：在实际开发中，动态的页面信息变化可能导致某元素暂时undefined（比如用按钮操控该元素显示或隐藏时），这样就无法用ref引用这个元素。</li><li>解决方案：vue提供this.$nextTick(callback) 来延迟ref引用DOM的时间，使得在DOM元素被重新渲染后才被ref引用。 <img src="'+o+'" alt=""></li></ul></li></ul>',5),f=[c];function n(d,h,p,m,u,b){return r(),a("div",null,f)}const k=e(_,[["render",n]]);export{T as __pageData,k as default};
