import{_ as s,c as a,o as i,a4 as t,b3 as e,b4 as l,b5 as p,b6 as h,b7 as r,b8 as o,b9 as n,ba as c,bb as k,bc as d}from"./chunks/framework.C8gDNRqg.js";const C=JSON.parse('{"title":"Less基础","description":"","frontmatter":{},"headers":[],"relativePath":"basic/进阶/Less/01-基础.md","filePath":"basic/进阶/Less/01-基础.md"}'),g={name:"basic/进阶/Less/01-基础.md"},_=t(`<h1 id="less基础" tabindex="-1">Less基础 <a class="header-anchor" href="#less基础" aria-label="Permalink to &quot;Less基础&quot;">​</a></h1><h2 id="引入方法" tabindex="-1">引入方法 <a class="header-anchor" href="#引入方法" aria-label="Permalink to &quot;引入方法&quot;">​</a></h2><ul><li>方法一：在官网下载 less.js，然后用link标签引入自定义的 less 文件。</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stylesheet/less&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text/css&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;styles.less&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;//cdnjs.cloudflare.com/ajax/libs/less.js/3.11.1/less.min.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ul><li><p>方法二：第三方软件 koala。将 less 文件拖入该界面，可以转成 css 文件，在 html 中正常引入 css 文件即可关联。</p></li><li><p>方法三：编译器自动转换（VSCode 可以自动转换到 less 原目录下）。</p></li></ul><h2 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h2><h3 id="声明方法-变量名-值" tabindex="-1">声明方法：（@变量名 ：值） <a class="header-anchor" href="#声明方法-变量名-值" aria-label="Permalink to &quot;声明方法：（@变量名 ：值）&quot;">​</a></h3><p><img src="`+e+'" alt=""></p><p><strong>注意</strong>：变量定义属性名或路径时，使用的时候要给变量名加<code>{ }</code></p><p><strong>Less的注释</strong>也比较特别：</p><ul><li>/* */多行注释 在css中通用</li><li>//单行注释 css中不可见</li></ul><h2 id="混合" tabindex="-1">混合 <a class="header-anchor" href="#混合" aria-label="Permalink to &quot;混合&quot;">​</a></h2><blockquote><p>很多相同的样式要反复用在多个盒子里，此时可以使用类似“样式调用”的方法，减少代码重复率。</p></blockquote><p>那么该如何写呢？</p><p><img src="'+l+'" alt=""></p><h2 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h2><p>在Less中可以像函数那样进行传参，可以这样写：</p><p><img src="'+p+'" alt=""></p><p><strong>注意1</strong>：less 的编译也是顺序执行的，如果样式中原本有属性 A，混合时又写了个属性 A，则写在后面的生效（类似于覆盖了）。此外，若一个样式函数被调用了两次，则只有后面那个生效。</p><p><img src="'+h+'" alt=""></p><p><strong>注意2</strong>：参数也可以有初始值，多个参数之间用逗号连接，若实参为空则默认该初始值。形参</p><p><img src="'+r+'" alt=""></p><h2 id="匹配模式" tabindex="-1">匹配模式 <a class="header-anchor" href="#匹配模式" aria-label="Permalink to &quot;匹配模式&quot;">​</a></h2><blockquote><p>类似于 switch-case 分支判断</p></blockquote><p>在带有参数的样式中第一个参数不用 @，表示一个“分支选项”。该样式的不同分支，通过第一个参数控制，而写其他公用样式时，第一个参数设置为 @_。</p><p><img src="'+o+'" alt=""></p><h2 id="样式嵌套" tabindex="-1">样式嵌套 <a class="header-anchor" href="#样式嵌套" aria-label="Permalink to &quot;样式嵌套&quot;">​</a></h2><blockquote><p>与 html 的标签嵌套对应，样式也可以以块为单位来写。</p></blockquote><p><img src="'+n+'" alt=""></p><p><strong>注意</strong>：原本 css 中的 a:hover 应改写为：（&amp; 表示父选择器名）</p><p><img src="'+c+'" alt=""></p><h2 id="运算" tabindex="-1">运算 <a class="header-anchor" href="#运算" aria-label="Permalink to &quot;运算&quot;">​</a></h2><blockquote><p>less 中的变量可以进行四则运算（运算时自动处理 px 字符串，加乘除直接写，减法的运算符前后要留空格）。</p></blockquote><p><img src="'+k+'" alt=""></p><p><strong>注意</strong>：有些语句不希望 less 编译，而是直接传到 css 里，可以这样写：<code>~&#39;不想编译的代码&#39;;</code></p><p><img src="'+d+'" alt=""></p>',36),u=[_];function m(b,E,q,y,F,f){return i(),a("div",null,u)}const P=s(g,[["render",m]]);export{C as __pageData,P as default};
