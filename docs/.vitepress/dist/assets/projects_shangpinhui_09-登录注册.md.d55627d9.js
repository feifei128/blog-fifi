import{_ as i,c as a,o as l,V as e}from"./chunks/framework.987d87f6.js";const t="/blog-fifi/images/登录1.png",o="/blog-fifi/images/登录2.png",n="/blog-fifi/images/登录3.png",p="/blog-fifi/images/登录4.png",s="/blog-fifi/images/登录5.png",g="/blog-fifi/images/登录6.png",r="/blog-fifi/images/登录7.png",m="/blog-fifi/images/登录8.png",c="/blog-fifi/images/登录9.png",_="/blog-fifi/images/登录10.png",u="/blog-fifi/images/登录11.png",h="/blog-fifi/images/登录12.png",f="/blog-fifi/images/登录13.png",d="/blog-fifi/images/登录14.png",b="/blog-fifi/images/登录15.png",k="/blog-fifi/images/登录16.png",q="/blog-fifi/images/登录17.png",x="/blog-fifi/images/登录18.png",P="/blog-fifi/images/登录19.png",v="/blog-fifi/images/登录20.png",T="/blog-fifi/images/登录21.png",A="/blog-fifi/images/登录22.png",I="/blog-fifi/images/登录23.png",j="/blog-fifi/images/登录24.png",N="/blog-fifi/images/登录25.png",S="/blog-fifi/images/登录26.png",B="/blog-fifi/images/登录27.png",y=JSON.parse('{"title":"登录注册","description":"","frontmatter":{},"headers":[],"relativePath":"projects/shangpinhui/09-登录注册.md","filePath":"projects/shangpinhui/09-登录注册.md"}'),E={name:"projects/shangpinhui/09-登录注册.md"},H=e('<h1 id="登录注册" tabindex="-1">登录注册 <a class="header-anchor" href="#登录注册" aria-label="Permalink to &quot;登录注册&quot;">​</a></h1><h2 id="_1-静态组件" tabindex="-1">1. 静态组件 <a class="header-anchor" href="#_1-静态组件" aria-label="Permalink to &quot;1. 静态组件&quot;">​</a></h2><h3 id="_1-1-登录效果" tabindex="-1">1.1 登录效果 <a class="header-anchor" href="#_1-1-登录效果" aria-label="Permalink to &quot;1.1 登录效果&quot;">​</a></h3><p><img src="'+t+'" alt="image.png"></p><h3 id="_1-2-注册效果" tabindex="-1">1.2 注册效果 <a class="header-anchor" href="#_1-2-注册效果" aria-label="Permalink to &quot;1.2 注册效果&quot;">​</a></h3><p><img src="'+o+'" alt="image.png"></p><h2 id="_2-注册" tabindex="-1">2. 注册 <a class="header-anchor" href="#_2-注册" aria-label="Permalink to &quot;2. 注册&quot;">​</a></h2><h3 id="_2-1-验证码" tabindex="-1">2.1 验证码 <a class="header-anchor" href="#_2-1-验证码" aria-label="Permalink to &quot;2.1 验证码&quot;">​</a></h3><ul><li><p>思路：真实开发过程中，都是调用接口给手机发送短信验证码的，这部分由后端实现。因为该功能需要收费，因此在练习过程中使用后端提供的假接口。</p></li><li><p>代码</p><ul><li>建立接口</li></ul><p><img src="'+n+'" alt="image.png"></p><ul><li>搭建 vuex</li><li>页面结构</li></ul><p><img src="'+p+'" alt="image.png"></p><ul><li>逻辑：当手机号非空时发送请求获取验证码</li></ul><p><img src="'+s+'" alt="image.png"></p></li></ul><h3 id="_2-2-提交表单" tabindex="-1">2.2 提交表单 <a class="header-anchor" href="#_2-2-提交表单" aria-label="Permalink to &quot;2.2 提交表单&quot;">​</a></h3><ul><li><p>思路：当手机号非空，两次密码输入一致时，发送提交表单请求，成功后跳转至登陆页面。</p></li><li><p>代码</p><ul><li>建立接口：注意：当请求 url 中没有参数占位，那么不管几个参数，都直接写 data，并且放入接口内部，如黄色框线内所示。接口文档中提供了三个参数，如红线所示，我尝试将其像往常那样写到参数列表中，结果报错 201。</li></ul><p><img src="'+g+'" alt="image.png"></p><ul><li>搭建 vuex：因为参数的原因报错很久，所以将 actions 函数代码附在这里以作提示。</li></ul><p><img src="'+r+'" alt="image.png"></p><ul><li>页面结构</li></ul><p><img src="'+m+'" alt="image.png"></p><ul><li>逻辑</li></ul><p><img src="'+c+'" alt="image.png"></p></li></ul><h2 id="_3-登录" tabindex="-1">3. 登录 <a class="header-anchor" href="#_3-登录" aria-label="Permalink to &quot;3. 登录&quot;">​</a></h2><ul><li><p>思路</p></li><li><p>代码</p><ul><li>接口</li></ul><p><img src="'+_+'" alt="image.png"></p><ul><li>vuex：与往常不同，在 actions 函数中，commit 方法里要放回整个结果的.token，这样就把 token 存到 state 中了。</li></ul><p><img src="'+u+'" alt="image.png"></p><ul><li>页面结构：红线为双向绑定数据，上面的那些功能也都进行过该操作；黄线内为登录按钮绑定的点击事件。</li></ul><p><img src="'+h+'" alt="image.png"></p><ul><li>逻辑：和注册页面基本一样</li></ul><p><img src="'+f+'" alt="image.png"></p><ul><li>成功提示：登录成功后服务器会派发 token，用户唯一标识符，将来会经常用 token 找服务器找用户信息。</li></ul><p><img src="'+d+'" alt="image.png"></p><p><img src="'+b+'" alt="image.png"></p></li></ul><h2 id="_4-token-校验" tabindex="-1">4. token 校验 <a class="header-anchor" href="#_4-token-校验" aria-label="Permalink to &quot;4. token 校验&quot;">​</a></h2><blockquote><p>概念</p><ol><li>token 产生时间戳：用户成功登录，存储 token 的时间戳 A。</li><li>token 使用时间戳：axios 的拦截请求器中，请求头携带 token，这是使用 token 的时间，为时间戳 B。</li><li>判断 token 是否过期：时间差=时间戳 B-时间戳 A，若时间差大于指定的 token 有效时长，则过期。</li></ol></blockquote><h3 id="_4-1-思路" tabindex="-1">4.1 **思路： <a class="header-anchor" href="#_4-1-思路" aria-label="Permalink to &quot;4.1 \\*\\*思路：&quot;">​</a></h3><p>登陆成功后跳转至首页，此时原来的请登录按钮应变为“您好！12138”。要实现这个功能，首页应该发请求获取用户信息，也就是获取 token。而登录接口没提供传参位置，我们只能将 token 放到请求头里进行传参，然后在首页拉取 token。</p><ul><li><p><strong>登录网站</strong>：登录成功后仓库会将 TOKEN 存储到会话存储中 → 然后将会话存储中的 TOKEN 添加到仓库 token 中 → api 请求拦截器获取到仓库中的 taoken 会添加到 header 请求头中 → 路由守卫发现仓库有 token 会认为用户已经登录，会去查看仓库是否有用户信息 → 路由守卫发现仓库有用户信息 userInfo → 放行</p></li><li><p><strong>登陆过后刷新页面</strong>：仓库中的 userInfo 会清空 → 仓库中的 token 会重新从会话存储中获取 token: getToken()（会话存储中的 token 是登录的时候存储的）→ api 请求拦截器获取到仓库中的 taoken 会添加到 header 请求头中 → 路由守卫发现仓库有 token 会认为用户已经登录，会去查看仓库是否有用户信息 → 路由守卫发现仓库没有用户信息 userInfo 会拿着请求头中的 token 去发起请求获取 userInfo → 如果路由守卫获取到用户信息就放行，没有获取到用户信息（token 过期）就清除所有用户信息再返回登录页面</p></li></ul><h3 id="_4-2-代码" tabindex="-1">4.2 代码 <a class="header-anchor" href="#_4-2-代码" aria-label="Permalink to &quot;4.2 代码&quot;">​</a></h3><ul><li>Ajax 配置请求头：红框内容必须一字不差。</li></ul><p><img src="'+k+'" alt="image.png"></p><ul><li>在 Home 首页进行请求数据</li></ul><p><img src="'+q+'" alt="image.png"></p><ul><li><p>在 Header 组件内，对原来的“请登录”按钮进行修改，用 v-if。</p><ul><li>页面结构</li></ul><p><img src="'+x+'" alt="image.png"></p><ul><li>逻辑</li></ul><p><img src="'+P+'" alt="image.png"></p></li></ul><h3 id="_4-3-解决-token-一刷新就丢失的问题" tabindex="-1">4.3 解决 token 一刷新就丢失的问题 <a class="header-anchor" href="#_4-3-解决-token-一刷新就丢失的问题" aria-label="Permalink to &quot;4.3 解决 token 一刷新就丢失的问题&quot;">​</a></h3><ul><li>思路：存储至本地 localstorage</li><li>代码：在登陆业务的 vuex 中的 action 函数中，将获取到的 token 存到 localstorage 中。并将 state 下的 token 初值从&#39; &#39;改为由本地拉取。</li></ul><p><img src="'+v+'" alt="image.png"></p><p>对上述代码进行优化：封装。新建 src/utils/token.js 文件夹，对外暴露函数：</p><p><img src="'+T+'" alt="image.png"></p><p>然后回到 vuex 的 action 函数中调用它：</p><p><img src="'+A+'" alt="image.png"></p><p><img src="'+I+'" alt="image.png"></p><h2 id="_5-退出登录" tabindex="-1">5. 退出登录 <a class="header-anchor" href="#_5-退出登录" aria-label="Permalink to &quot;5. 退出登录&quot;">​</a></h2><ul><li><p>思路：点击退出登录，要清除 store 和本地存储里的相关用户信息，这需要 dispatch 一下，并且在退出登录成功后跳转至首页。</p></li><li><p>代码：</p><ul><li><p>接口：和登录注册共用一个接口</p></li><li><p>vuex：</p><ul><li>mutation</li></ul><p><img src="'+j+'" alt="image.png"></p><ul><li>action</li></ul><p><img src="'+N+'" alt="image.png"></p></li><li><p>页面结构</p></li></ul><p><img src="'+S+'" alt="image.png"></p><ul><li>逻辑</li></ul><p><img src="'+B+'" alt="image.png"></p></li></ul><h2 id="_6-遗留问题-下一次笔记中进行解决" tabindex="-1">6. 遗留问题（下一次笔记中进行解决） <a class="header-anchor" href="#_6-遗留问题-下一次笔记中进行解决" aria-label="Permalink to &quot;6. 遗留问题（下一次笔记中进行解决）&quot;">​</a></h2><ul><li>问题一：请求 token 的语句我们目前是写在 Home 里的，但是真正在项目中，许多组件都会用到 Header 组件，如果每个组件都去请求 token，很不方便。</li><li>问题二：已登录用户应该禁止其再访问登录页面。</li></ul>',36),V=[H];function $(O,C,D,K,J,R){return l(),a("div",null,V)}const z=i(E,[["render",$]]);export{y as __pageData,z as default};
