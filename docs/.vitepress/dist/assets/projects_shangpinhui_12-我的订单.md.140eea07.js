import{_ as i,c as a,o as t,V as l}from"./chunks/framework.987d87f6.js";const p="/blog-fifi/images/订单1.png",e="/blog-fifi/images/订单2.png",r="/blog-fifi/images/订单3.png",o="/blog-fifi/images/订单4.png",s="/blog-fifi/images/订单5.png",n="/blog-fifi/images/订单6.png",g="/blog-fifi/images/订单7.png",m="/blog-fifi/images/订单8.png",_="/blog-fifi/images/订单9.png",c="/blog-fifi/images/订单10.png",S=JSON.parse('{"title":"我的订单","description":"","frontmatter":{},"headers":[],"relativePath":"projects/shangpinhui/12-我的订单.md","filePath":"projects/shangpinhui/12-我的订单.md"}'),d={name:"projects/shangpinhui/12-我的订单.md"},f=l('<h1 id="我的订单" tabindex="-1">我的订单 <a class="header-anchor" href="#我的订单" aria-label="Permalink to &quot;我的订单&quot;">​</a></h1><h2 id="_1-我的订单-页面结构" tabindex="-1">1. 我的订单--页面结构 <a class="header-anchor" href="#_1-我的订单-页面结构" aria-label="Permalink to &quot;1. 我的订单--页面结构&quot;">​</a></h2><ul><li>效果</li></ul><p><img src="'+p+'" alt="image.png"></p><ul><li><p>需求：点击导航栏中的某一项，在内容板块显示对应的内容。</p></li><li><p>思路：整个页面为 center 模块，将静态组件中原来的页面结构进行分割，整理出多个子组件（导航板块留在模块内），如 myOrder、groupOrder 等，每个导航项都是一个子组件。在 center 内用路由跳转来实现点击导航显示每个子组件的内容，这就需要为所有子组件设置二级路由。</p></li><li><p>代码</p><ul><li><p>myOrder、groupOrder 子组件的分离此处略。</p></li><li><p>二级路由 <img src="'+e+'" alt="image.png"></p></li><li><p>center 模块</p><p>页面结构：以导航栏前两项（我的订单、团购订单）为例。</p></li></ul><p><img src="'+r+'" alt="image.png"></p><p>然后在设置路由出口：</p><p><img src="'+o+'" alt="image.png"></p></li></ul><h2 id="_2-myorder-数据渲染" tabindex="-1">2. myOrder--数据渲染 <a class="header-anchor" href="#_2-myorder-数据渲染" aria-label="Permalink to &quot;2. myOrder--数据渲染&quot;">​</a></h2><ul><li><p>思路：之前的数据渲染都是用 vuex 做的，现在引入一种新方法。向服务器请求数据是通过接口的，之前是用 vuex 的派发 action 来向接口发请求，现在想要不通过 vuex 来请求接口，可以直接在 myOrder 里面 import 对应的接口，然后直接调用。然而，在每个组件都 import 是十分麻烦的，所以我们在 main.js 中通过全局总线把 api 里的所有请求函数挂载到 vue 原型对象上，这样以后只需使用 this.$API 就可以调用所有借口了。</p></li><li><p>代码</p><ol><li>main.js：配置 this.$API，先导入，然后在生命周期函数写添加红框内的代码。</li></ol><p><img src="'+s+'" alt="image.png"></p><p><img src="'+n+'" alt="image.png"></p><ol start="2"><li>写接口</li></ol><p><img src="'+g+'" alt="image.png"></p><ol start="3"><li>请求数据：红色框线内为请求代码，黄色框线内的参数都是在 data 定义好的，用于双向绑定变量。</li></ol><p><img src="'+m+'" alt="image.png"></p><ol start="4"><li><p>渲染：可以在 html 里直接访问 myorder 对象变量，略。</p></li><li><p>分页器：直接调用之前在 Search 模块做过的分页器模块（Pagination），在分页器模块内有提供使用方法，可以直接复制。</p><ol><li>页面结构</li></ol><p><img src="'+_+'" alt="image.png"></p><ol start="2"><li>逻辑</li></ol><p><img src="'+c+'" alt="image.png"></p></li></ol></li></ul>',7),h=[f];function u(b,P,x,y,O,q){return t(),a("div",null,h)}const T=i(d,[["render",u]]);export{S as __pageData,T as default};
